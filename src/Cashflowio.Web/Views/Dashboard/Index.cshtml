@using Cashflowio.Core.Interfaces
@inject IRepository Repository
@model int
@{
    ViewBag.Title = "Dashboard";
    var selectedYear = Model;

    var income = Repository.List<Income>().ToList();
    var expenses = Repository.List<Expense>().ToList();
    var transfers = Repository.List<Transfer>().ToList();
    var creditCharges = Repository.List<CreditCharge>().ToList();
    var creditPayments = Repository.List<CreditPayment>().ToList();

    var years = new SelectList(income.Select(x => x.Date.Year).Distinct(), selectedValue: selectedYear);

    if (selectedYear != 0)
    {
        income = income.Where(x => x.Date.Year == selectedYear).ToList();
        transfers = transfers.Where(x => x.Date.Year == selectedYear).ToList();
        expenses = expenses.Where(x => x.Date.Year == selectedYear).ToList();
    }

    var moneyAccounts = Repository.List<MoneyAccount>().ToList();
    var concepts = Repository.List<Concept>().ToList();
    var incomeSources = Repository.List<IncomeSource>().ToList();
    var expenseCategories = Repository.List<ExpenseCategory>().ToList();
    var exchangeRateById = Repository.List<ExchangeRate>().ToDictionary(x => x.Id, x => x.Value);
}

<form id="yearForm" asp-action="Index" class="form-inline">
    <div class="form-group">
        <label for="Year">Filter by year</label>
        <select id="Year" name="Year" asp-items="@years" onchange="$('#yearForm').submit()">
            <option value="0">None</option>
        </select>
    </div>
</form>

<div class="row pt-3">
    @foreach (var incomeSource in incomeSources)
    {
        var exitIncome = income.Where(x => x.SourceId == incomeSource.Id).ToList();
        var exitIncomeByDescription = exitIncome.GroupBy(x => x.Description)
            .OrderByDescending(g => g.Sum(i => i.Amount));

        <div class="col">
            <div class="info-box bg-success">
                <span class="info-box-icon">
                    <i class="fas fa-arrow-circle-down"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">@incomeSource.Name</span>
                    <span class="info-box-number">
                        +@exitIncome.Sum(x => x.Amount).ToString("C0")
                    </span>
                    <div class="progress-description d-flex align-content-start flex-wrap">
                        @foreach (var group in exitIncomeByDescription)
                        {
                            <a class="btn btn-success" target="_blank"
                               asp-action="Income" asp-controller="Query" asp-route-year="@selectedYear"
                               asp-route-source="@incomeSource.Name" asp-route-description="@group.Key">
                                @group.Key
                                <span class="badge badge-light">
                                    @group.Sum(x => x.Amount).ToString("C0")
                                </span>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="row">
    @foreach (var moneyAccount in moneyAccounts)
    {
        var incomeReceived = income.Where(x => x.DestinationId == moneyAccount.Id);
        var paymentReceived = creditPayments.Where(x => x.DestinationId == moneyAccount.Id);
        var sent = transfers.Where(x => x.SourceId == moneyAccount.Id).ToList();
        var received = transfers.Where(x => x.DestinationId == moneyAccount.Id).ToList();
        var spent = expenses.Where(x => x.SourceId == moneyAccount.Id).ToList();
        var debt = creditCharges.Where(x => x.SourceId == moneyAccount.Id);
        var balance = incomeReceived.Sum(x => x.Amount) - sent.Sum(x => x.Amount) + received.Sum(x => x.Amount)
                      + paymentReceived.Sum(x => x.Amount) - debt.Sum(x => x.Amount)
                      - spent.Sum(x => x.ExchangeRate == null ? x.Amount : x.Amount * x.ExchangeRate.Value);
        var transferSentByType = sent.GroupBy(x => x.Destination.Name)
            .OrderByDescending(g => g.Sum(i => i.Amount));
        var transferReceivedByType = received.GroupBy(x => x.Source.Name)
            .OrderByDescending(g => g.Sum(i => i.Amount));

        <div class="col-md-4">
            <div class="info-box bg-warning">
                <span class="info-box-icon">
                    <i class="fas fa-box"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">@moneyAccount.Name</span>
                    <span class="info-box-number">
                        @balance.ToString("C0")
                    </span>
                    <span class="progress-description progress-description d-flex align-content-start flex-wrap">
                        @foreach (var group in transferReceivedByType)
                        {
                            <a class="btn btn-warning" target="_blank"
                               asp-action="Transfer" asp-controller="Query" asp-route-year="@selectedYear"
                               asp-route-source="@group.Key" asp-route-destination="@moneyAccount.Name">
                                @group.Key
                                <span class="badge badge-light">
                                    <i class="fas fa-angle-down text-success"></i>
                                    @group.Sum(x => x.Amount).ToString("C0")
                                </span>
                            </a>
                        }

                        @foreach (var group in transferSentByType)
                        {
                            <a class="btn btn-warning" target="_blank"
                               asp-action="Transfer" asp-controller="Query" asp-route-year="@selectedYear"
                               asp-route-source="@moneyAccount.Name" asp-route-destination="@group.Key">
                                @group.Key
                                <span class="badge badge-light">
                                    <i class="fas fa-angle-up text-danger"></i>
                                    @group.Sum(x => x.Amount).ToString("C0")
                                </span>
                            </a>
                        }
                    </span>
                </div>
            </div>
        </div>
    }
</div>

<div class="row">
    @foreach (var expenseCategory in expenseCategories)
    {
        var debtFromCategory = creditCharges.Where(x => x.DestinationId == expenseCategory.Id).ToList();
        var expensesFromCategory = debtFromCategory.Concat<MoneyOutflow>(expenses.Where(x => x.DestinationId == expenseCategory.Id)).ToList();
        var expensesByConcept = expensesFromCategory.GroupBy(x => x.Concept.Name)
            .OrderByDescending(g => g.Sum(x => x.ExchangeRate == null ?
                x.Amount : x.Amount * x.ExchangeRate.Value));

        <div class="col-3">
            <div class="info-box bg-danger">
                <span class="info-box-icon">
                    <i class="fas fa-shopping-bag"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">@expenseCategory.Name</span>
                    <span class="info-box-number">
                        -@expensesFromCategory.Sum(x => x.ExchangeRateId == null ?
                             x.Amount : x.Amount * exchangeRateById[x.ExchangeRateId.Value]).ToString("C0")
                    </span>
                    <div class="progress-description d-flex align-content-start flex-wrap">
                        @foreach (var group in expensesByConcept)
                        {
                            <a class="btn btn-danger" target="_blank"
                               asp-action="Expense" asp-controller="Query" asp-route-year="@selectedYear"
                               asp-route-concept="@group.Key" asp-route-destination="@expenseCategory.Name">
                                @group.Key
                                <span class="badge badge-light">
                                    @group.Sum(x => x.ExchangeRate == null ?
                                        x.Amount : x.Amount * x.ExchangeRate.Value).ToString("C0")
                                </span>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>