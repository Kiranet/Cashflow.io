@using Cashflowio.Core.Interfaces
@inject IRepository Repository
@model int
@{
    ViewBag.Title = "Dashboard";
    var selectedYear = Model;

    var income = Repository.List<Income>().ToList();
    var expenses = Repository.List<Expense>().ToList();
    var transfers = Repository.List<Transfer>().ToList();
    var creditCharges = Repository.List<CreditCharge>().ToList();
    var creditPayments = Repository.List<CreditPayment>().ToList();

    var years = new SelectList(income.Select(x => x.Date.Year).Distinct(), selectedValue: selectedYear);

    if (selectedYear != 0)
    {
        income = income.Where(x => x.Date.Year == selectedYear).ToList();
        transfers = transfers.Where(x => x.Date.Year == selectedYear).ToList();
        expenses = expenses.Where(x => x.Date.Year == selectedYear).ToList();
    }

    var moneyAccounts = Repository.List<MoneyAccount>().ToList();
    var concepts = Repository.List<Concept>().ToList();
    var incomeSources = Repository.List<IncomeSource>().ToList();
    var expenseCategories = Repository.List<ExpenseCategory>().ToList();
    var exchangeRateById = Repository.List<ExchangeRate>().ToDictionary(x => x.Id, x => x.Value);
}

<form id="yearForm" asp-action="Index" class="form-inline">
    <div class="form-group">
        <select id="Year" name="Year" asp-items="@years" onchange="$('#yearForm').submit()">
            <option value="0">None</option>
        </select>
    </div>
</form>

<div class="row pt-3">
    @foreach (var incomeSource in incomeSources)
    {
        var exitIncome = income.Where(x => x.SourceId == incomeSource.Id).ToList();
        var exitIncomeByDescription = exitIncome.GroupBy(x => x.Description)
            .OrderByDescending(g => g.Sum(i => i.Amount));

        <div class="col">
            <div class="info-box bg-success">
                <span class="info-box-icon">
                    <i class="fas fa-arrow-circle-down"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">@incomeSource.Name</span>
                    <span class="info-box-number">
                        +@exitIncome.Sum(x => x.Amount).ToString("C0")
                    </span>
                    <div class="progress-description d-flex align-content-start flex-wrap">
                        @foreach (var group in exitIncomeByDescription)
                        {
                            <a class="btn btn-success" target="_blank"
                               asp-action="Income" asp-controller="Query" asp-route-year="@selectedYear"
                               asp-route-source="@incomeSource.Name" asp-route-description="@group.Key">
                                @group.Key
                                <span class="badge badge-light">
                                    @group.Sum(x => x.Amount).ToString("C0")
                                </span>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="row">
    @foreach (var moneyAccount in moneyAccounts)
    {
        var incomeReceived = income.Where(x => x.DestinationId == moneyAccount.Id);
        var paymentReceived = creditPayments.Where(x => x.DestinationId == moneyAccount.Id);
        var sent = transfers.Where(x => x.SourceId == moneyAccount.Id).ToList();
        var received = transfers.Where(x => x.DestinationId == moneyAccount.Id).ToList();
        var spent = expenses.Where(x => x.SourceId == moneyAccount.Id).ToList();
        var debt = creditCharges.Where(x => x.SourceId == moneyAccount.Id);
        var balance = incomeReceived.Sum(x => x.Amount) - sent.Sum(x => x.Amount) + received.Sum(x => x.Amount)
                      + paymentReceived.Sum(x => x.Amount) - debt.Sum(x => x.Amount)
                      - spent.Sum(x => x.ExchangeRate == null ? x.Amount : x.Amount * x.ExchangeRate.Value);
        var transferSentByType = sent.GroupBy(x => x.Destination.Name)
            .OrderByDescending(g => g.Sum(i => i.Amount));
        var transferReceivedByType = received.GroupBy(x => x.Source.Name)
            .OrderByDescending(g => g.Sum(i => i.Amount));

        dynamic o = new
        {
            AccountName = moneyAccount.Name,
            Balance = balance.ToString("C0"),
            Description = "",
            Source = "",
            Destination = "",
            Icon = "",
            Amount = "",
            ConceptName = ""
        };

        <div class="col-md-12">
            <div class="info-box bg-warning">
                <div class="info-box-content">
                    <span class="info-box-text">@o.AccountName</span>
                    <span class="info-box-number">
                        @o.Balance
                    </span>
                    <div class="row mt-2">
                        @{
                            var list = new List<dynamic>();
                        }
                        @foreach (var group in transferReceivedByType)
                        {
                            o = new
                            {
                                Icon = "fa-angle-down text-success",
                                Amount = group.Sum(x => x.Amount).ToString("C0"),
                                ConceptName = group.Key,
                                Source = group.Key,
                                Destination = moneyAccount.Name,
                                Description = "Received"
                            };

                            list.Add(o);
                        }

                        @foreach (var group in transferSentByType)
                        {
                            o = new
                            {
                                Icon = "fa-angle-up text-danger",
                                Amount = group.Sum(x => x.Amount).ToString("C0"),
                                ConceptName = group.Key,
                                Source = moneyAccount.Name,
                                Destination = group.Key,
                                Description = "Sent"
                            };

                            list.Add(o);
                        }

                        @foreach (var x in list.GroupBy(x => x.Icon))
                        {
                            <div class="col">
                                <table class="table table-sm table-bordered">
                                    <thead>
                                    <tr>
                                    <th>
                                        <i class="fas @x.First().Icon"></i>
                                    </th>
                                    <th>@x.First().Description</th>
                                    <th></th>
                                    </thead>
                                    <tbody>
                                    @foreach (var y in x)
                                    {
                                        <tr>
                                            <td>
                                                @y.ConceptName
                                            </td>
                                            <td class="text-right">
                                                <span class="badge badge-light">
                                                    @y.Amount
                                                </span>
                                            </td>
                                            <td>
                                                <a class="btn btn-warning" target="_blank"
                                                   asp-action="Transfer" asp-controller="Query" asp-route-year="@selectedYear"
                                                   asp-route-source="@y.Source" asp-route-destination="@y.Destination">
                                                    <i class="fas fa-arrow-circle-right"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

</div>

<div class="row">
    @foreach (var expenseCategory in expenseCategories)
    {
        var debtFromCategory = creditCharges.Where(x => x.DestinationId == expenseCategory.Id).ToList();
        var expensesFromCategory = debtFromCategory.Concat<MoneyOutflow>(expenses.Where(x => x.DestinationId == expenseCategory.Id)).ToList();
        var expensesByConcept = expensesFromCategory.GroupBy(x => x.Concept.Name)
            .OrderByDescending(g => g.Sum(x => x.ExchangeRate == null ?
                x.Amount : x.Amount * x.ExchangeRate.Value));

        <div class="col-6">
            <div class="info-box bg-danger">
                <div class="info-box-content">
                    <span class="info-box-text">@expenseCategory.Name</span>
                    <span class="info-box-number">
                        -@expensesFromCategory.Sum(x => x.ExchangeRateId == null ?
                             x.Amount : x.Amount * exchangeRateById[x.ExchangeRateId.Value]).ToString("C0")
                    </span>
                    <div class="row">
                        <table class="table table-sm table-bordered">
                            <thead>
                            <tr>
                                <th>
                                    Concept
                                </th>
                                <th></th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var group in expensesByConcept)
                            {
                                <tr>
                                    <td>
                                        @group.Key
                                    </td>
                                    <td class="text-right">
                                        <span class="badge badge-light">
                                            @group.Sum(x => x.ExchangeRate == null ?
                                                x.Amount : x.Amount * x.ExchangeRate.Value).ToString("C0")
                                        </span>
                                    </td>
                                    <td>
                                        <a class="btn btn-danger" target="_blank"
                                           asp-action="Expense" asp-controller="Query" asp-route-year="@selectedYear"
                                           asp-route-concept="@group.Key" asp-route-destination="@expenseCategory.Name">
                                            <i class="fas fa-money-check"></i>
                                        </a>

                                        <a class="btn btn-danger" target="_blank"
                                           asp-action="Credit" asp-controller="Query" asp-route-year="@selectedYear"
                                           asp-route-concept="@group.Key" asp-route-destination="@expenseCategory.Name">
                                            <i class="fas fa-credit-card"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section scripts
{
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/dataTables.bootstrap4.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.table').DataTable({
            bLengthChange : false,
            pageLength : 5
        });
    } );
    </script>
}

@section styles{
    <link href="https://cdn.datatables.net/1.10.20/css/dataTables.bootstrap4.min.css"/>
}